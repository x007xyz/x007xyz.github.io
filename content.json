{"meta":{"title":"x007xyz blog","subtitle":"","description":"","author":"x007xyz","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2021-08-31T05:58:03.000Z","updated":"2022-05-15T14:39:21.605Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-08-31T05:47:18.000Z","updated":"2022-05-15T14:39:21.605Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"vue项目代码格式规范设置","slug":"vue项目代码格式规范设置","date":"2022-05-24T03:53:47.000Z","updated":"2022-05-24T04:10:54.605Z","comments":true,"path":"2022/05/24/vue项目代码格式规范设置/","link":"","permalink":"http://example.com/2022/05/24/vue%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E8%AE%BE%E7%BD%AE/","excerpt":"","text":"为了尽量统一项目成员的代码风格，降低开发者对代码的理解成本，所以我们需要为项目统一代码格式规范；同时我们不能为了降低理解成本，去增加开发成本，所以我们借助VS Code的相关插件去完成代码格式化的功能。 为项目添加eslint使用vue-cli构建的项目，在项目构建时，就会让你选择格式化方案，如果是已有项目运行vue add eslint添加格式化方式，建议选择Prettier 的格式化方案；如果是uniapp的项目，如果使用的是vue-cli，也是使用vue add eslint，如果是使用HBuilder构建打包，需要安装另外安装@vue/cli-service，不然npm run lint无法正常格式化。 添加eslint之后，根据你的选择，eslint的配置项，可能在.eslintrc.js文件中，如果该文件不存在，配置项应该在package.json，默认配置应该如下： 123456789101112131415module.exports = &#123; root: true, env: &#123; node: true, &#125;, extends: [ &quot;plugin:vue/essential&quot;, &quot;eslint:recommended&quot;, &quot;plugin:prettier/recommended&quot;, ], parserOptions: &#123; parser: &quot;@babel/eslint-parser&quot;, &#125;&#125;; 这些配置不建议改动，如果有其他需求，我们可以在其基础上进行自定义配置。 自定义eslint配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576module.exports = &#123; &quot;root&quot;: true, &quot;env&quot;: &#123; &quot;node&quot;: true &#125;, &quot;extends&quot;: [ &quot;plugin:vue/essential&quot;, &quot;plugin:vue/recommended&quot;, &quot;eslint:recommended&quot;, &quot;@vue/prettier&quot; ], &quot;parserOptions&quot;: &#123; &quot;parser&quot;: &quot;babel-eslint&quot; &#125;, rules: &#123; &quot;no-console&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;error&quot; : &quot;warn&quot;, &quot;no-debugger&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;error&quot; : &quot;warn&quot;, &quot;no-unused-vars&quot;: [ &quot;error&quot;, &#123; vars: &quot;all&quot;, args: &quot;none&quot;, ignoreRestSiblings: true &#125;, ], &quot;vue/order-in-components&quot;: [&quot;error&quot;, &#123; &quot;order&quot;: [ &quot;el&quot;, &quot;name&quot;, &quot;key&quot;, &quot;parent&quot;, &quot;functional&quot;, [&quot;delimiters&quot;, &quot;comments&quot;], [&quot;components&quot;, &quot;directives&quot;, &quot;filters&quot;], &quot;extends&quot;, &quot;mixins&quot;, [&quot;provide&quot;, &quot;inject&quot;], &quot;ROUTER_GUARDS&quot;, &quot;layout&quot;, &quot;middleware&quot;, &quot;validate&quot;, &quot;scrollToTop&quot;, &quot;transition&quot;, &quot;loading&quot;, &quot;inheritAttrs&quot;, &quot;model&quot;, [&quot;props&quot;, &quot;propsData&quot;], &quot;emits&quot;, &quot;setup&quot;, &quot;asyncData&quot;, &quot;data&quot;, &quot;fetch&quot;, &quot;head&quot;, &quot;computed&quot;, &quot;watch&quot;, &quot;watchQuery&quot;, &quot;LIFECYCLE_HOOKS&quot;, &quot;onLoad&quot;, &quot;onShow&quot;, &quot;onReady&quot;, &quot;onHide&quot;, &quot;onUnload&quot;, &quot;onResize&quot;, &quot;onPullDownRefresh&quot;, &quot;onReachBottom&quot;, &quot;onTabItemTap&quot;, &quot;onShareAppMessage&quot;, &quot;onPageScroll&quot;, &quot;methods&quot;, [&quot;template&quot;, &quot;render&quot;], &quot;renderError&quot; ] &#125;] &#125;, globals: &#123; uni: true, requirePlugin: true &#125;,&#125; 推荐的eslint配置如上。 extends中添加了plugin:vue/recommended，这个插件是限制了vue的一些代码规范，如组件属性的顺序，vue选项的顺序等。 rules中的no-console和no-debugger限制了代码中的console和debugger，在开发环境会生成警告信息，在生产环境会提示报错；no-unused-vars对为使用的变量做了限制，除了参数和reset中不允许出现未使用的变量；vue/order-in-components是在uniapp中对plugin:vue/recommended规范的一个补充，uniapp中存在许多vue没有的选项，设置vue/order-in-components将这些没有的选项也进行格式化排序。 globals中添加使用到的全局变量，如果不添加会在格式化时报错。uni是uniapp常用的全局对象，requirePlugin是微信开发用的的全局变量。 pre-commit设置pre-commit在git commit之前做一些处理，我们需要在提交之前对代码格式规范做检查，避免在项目打包时，出现eslint的报错。在项目添加lint-staged，然后再package.json中配置（我们使用vue命令添加eslint时，选择commit时格式化，会自动帮我们添加）： 123456789&quot;gitHooks&quot;: &#123; &quot;pre-commit&quot;: &quot;lint-staged&quot;&#125;,&quot;lint-staged&quot;: &#123; &quot;*.&#123;js,jsx,vue&#125;&quot;: [ &quot;vue-cli-service lint --mode production&quot;, &quot;git add&quot; ]&#125; VS Code配置我们需要用的eslint和vetur这两个插件，eslint插件需要npm全局安装eslint包，两个插件安装完之后，在VS Code的配置中，设置： 123&quot;[vue]&quot;: &#123; &quot;editor.defaultFormatter&quot;: &quot;octref.vetur&quot;&#125; 如果无法格式化，可能是格式化工具冲突导致的，设置： 12345678// 保存时使用VSCode 自身格式化程序格式化&quot;editor.formatOnSave&quot;: true,// 保存时用eslint格式化&quot;editor.codeActionsOnSave&quot;: &#123; &quot;source.fixAll.eslint&quot;: true｝// 两者会在格式化js时冲突，所以需要关闭默认js格式化程序 &quot;javascript.format.enable&quot;: false 参考vue风格指南 eslint-plugin-vue eslint文档","categories":[{"name":"工具","slug":"工具","permalink":"http://example.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"uniapp","slug":"uniapp","permalink":"http://example.com/tags/uniapp/"},{"name":"VS Code","slug":"VS-Code","permalink":"http://example.com/tags/VS-Code/"},{"name":"Vue","slug":"Vue","permalink":"http://example.com/tags/Vue/"},{"name":"eslint","slug":"eslint","permalink":"http://example.com/tags/eslint/"}]},{"title":"构建uniapp(微信小程序)发布平台","slug":"构建uniapp-微信小程序-发布平台","date":"2022-05-15T14:50:46.000Z","updated":"2022-05-15T14:52:12.804Z","comments":true,"path":"2022/05/15/构建uniapp-微信小程序-发布平台/","link":"","permalink":"http://example.com/2022/05/15/%E6%9E%84%E5%BB%BAuniapp-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%8F%91%E5%B8%83%E5%B9%B3%E5%8F%B0/","excerpt":"","text":"构建uniapp(微信小程序)发布平台目录 node.js调用shell命令 原生模块child_process shelljs simple-git操作git 发布小程序流程 拉取代码 发布并上传微信小程序 使用koa构建服务 通过websocket调用接口 其他 环境 配置 参考链接 node.js调用shell命令要实现自动发布微信小程序，我们需要拉取代码和调用hbuilder，这些都依赖shell脚本，所以我们先来了解一下如何在node.js中调用shell命令。 原生模块child_process在node.js中可以使用原生的child_process模块来调用shell命令的形式来执行git命令，调用的两种方式： 12child_process.exec(command[, options][, callback])child_process.execFile(file[, args][, options][, callback]) 例如执行拉取代码的命令就是child_process.exec(&#39;git pull&#39;)； shelljs我们也可以借助第三方库shelljs，它是基于node的一个扩展，比原生的child_process兼容性更好，使用更灵活。 12345678910111213141516171819202122232425var shell = require(&#x27;shelljs&#x27;);if (!shell.which(&#x27;git&#x27;)) &#123; shell.echo(&#x27;Sorry, this script requires git&#x27;); shell.exit(1);&#125;// Copy files to release dirshell.rm(&#x27;-rf&#x27;, &#x27;out/Release&#x27;);shell.cp(&#x27;-R&#x27;, &#x27;stuff/&#x27;, &#x27;out/Release&#x27;);// Replace macros in each .js fileshell.cd(&#x27;lib&#x27;);shell.ls(&#x27;*.js&#x27;).forEach(function (file) &#123; shell.sed(&#x27;-i&#x27;, &#x27;BUILD_VERSION&#x27;, &#x27;v0.1.2&#x27;, file); shell.sed(&#x27;-i&#x27;, /^.*REMOVE_THIS_LINE.*$/, &#x27;&#x27;, file); shell.sed(&#x27;-i&#x27;, /.*REPLACE_LINE_WITH_MACRO.*\\n/, shell.cat(&#x27;macro.js&#x27;), file);&#125;);shell.cd(&#x27;..&#x27;);// Run external tool synchronouslyif (shell.exec(&#x27;git commit -am &quot;Auto-commit&quot;&#x27;).code !== 0) &#123; shell.echo(&#x27;Error: Git commit failed&#x27;); shell.exit(1);&#125; simple-git操作git如果操作git命令我们可以使用专门为git设置的库simple-git，示例： 1234567891011121314151617181920212223const simpleGit = require(&#x27;simple-git/promise&#x27;);const path = require(&#x27;path&#x27;);async function gitinit() &#123; const projectPath = path.join(__dirname); const cmd = &quot;init&quot;; const args = &quot;&quot;; const git = simpleGit(projectPath); try &#123; const res = await git[cmd](args); console.info(&quot;res:&quot;, res); &#125; catch (e) &#123; console.error(&#x27;执行 simple-git 命令时发生错误&#x27;, &#123; projectPath, cmd, args &#125;, e); throw e; &#125;&#125;gitinit(); 发布小程序流程我们先梳理一下，uniapp开发正常发布小程序的简单流程。 首先拉取最新的代码 使用hbuilder打包并发行 使用微信小程序开发工具上传体验版 以上三个步骤就是小程序发布的简单流程了，我们只需要能够使用代码实现上述的步骤就可以达到我们需求了。下面我们来使用node.js来实现一下： 拉取代码使用git命令我们就可以拉取代码了，借助simple-git我们就可以在node.js中操作git。 在一般情况下，项目应该是都已经在本地了，我们只需要使用git pull拉取最新代码就可以了，但是我们也应该兼容本地代码仓库不存在的情况；现在我们开始构建项目。 首先我们需要创建一个文件夹project用来放置我们从远端来取下拉的项目，然后创建publish.js用来编写发布逻辑，我们先添加拉取项目的代码： 12345678910111213141516171819const Git = require(&#x27;simple-git&#x27;)const fse = require(&#x27;fs-extra&#x27;)const dirPath = path.join(__dirname, `./project/$&#123;data.name&#125;`)let git = null// 查看项目是否存在if (!fse.pathExistsSync(dirPath)) &#123; console.log(&#x27;项目不存在，开始创建项目&#x27;) // 不存在则git clone await Git().clone(remoteUrl, dirPath) git = Git(dirPath)&#125; else &#123; console.log(&#x27;项目存在，拉取最新代码&#x27;) // 存在则git pull git = Git(dirPath) const logs = await git.pull()&#125;// 获取信息的提交信息const logs = await git.log(&#123; maxCount: 10 &#125;) 发布并上传微信小程序通过hbuilder提供的cli命令行工具我们可以直接使用一行shell命令发布并上传微信小程序： 12# 编译uni-app项目到微信小程序，并发行小程序到微信平台 cli publish --platform mp-weixin --project 项目名称 --upload true --appid 小程序appid --description 发布描述 --version 发布版本 --privatekey 小程序上传密钥文件 发布微信小程序之前，我们需要先将拉取下来的项目使用hbuilder打开，cli命令行工具也提供了这样的功能。 1cli project open --path 项目路径 因为我们的项目可能使用了npm包，所以要在发布之前安装所有的npm包。 所以发布命令的执行过程是： 运行yarn，安装第三方包 使用hbuilder打开项目 使用hbuilder打包并上传微信小程序 对应的代码如下： 12345678910// dirPath 是项目路径，config.cli是cli路径// 打开项目并执行yarn命令shell.exec(`cd $&#123;dirPath&#125; &amp;&amp; yarn`)// 使用hbuilder打开项目shell.exec(`$&#123;config.cli&#125; project open --path $&#123;dirPath&#125;`)// 使用hbuilder打包并上传微信小程序shell.exec( `$&#123;config.cli&#125; publish --platform mp-weixin --project $&#123;name&#125; --upload true --appid $&#123;appid&#125; --description $&#123;versionDesc&#125; --version $&#123;version&#125; --privatekey $&#123;privatekey&#125;`) 使用koa构建服务完成上面的流程之后，我们使用node.js自动发布小程序了，但是实际的应用中，我们需要把这个能力提供给所有的人，所以我们使用koa构建web服务将发布的能力对外开放。我们先构建一个简单的koa服务： 123456789101112131415161718192021222324252627const Koa = require(&#x27;koa&#x27;);const app = new Koa();const Router = require(&#x27;koa-router&#x27;);const bodyParser = require(&#x27;koa-bodyparser&#x27;);app.use(bodyParser());const render = require(&#x27;koa-art-template&#x27;);const path = require(&#x27;path&#x27;)render(app, &#123; root: path.join(__dirname, &#x27;view&#x27;), extname: &#x27;.art&#x27;, debug: process.env.NODE_ENV !== &#x27;production&#x27;&#125;);const router = new Router();router.get(&#x27;/&#x27;, async (ctx) =&gt; &#123; await ctx.render(&#x27;user&#x27;);&#125;)app.use(router.routes()).use(router.allowedMethods());app.listen(3000, () =&gt; &#123; console.log(&#x27;server is running on port 3000&#x27;);&#125;) 通过websocket调用接口发布微信小程序是一个比较漫长的过程，如果在调用的过程中一直不给页面反馈对用户就非常不友好了；而且同一个微信小程序如果正在发布中，不应该能够再次调用发布接口，所以我们使用websocket进行数据交互；现在在koa添加websocket，然后使用websocket返回打印信息： 123456789101112131415161718192021const websockify = require(&#x27;koa-websocket&#x27;);const app = websockify(new Koa());/** * 定义websocket连接 */const wsRouter = new Router()wsRouter.get(&#x27;/ws/publish/:name&#x27;, async (ctx) =&gt; &#123; console.log(&#x27;ctx&#x27;, ctx.params); require(&#x27;./publish&#x27;)(ctx.websocket, ctx.params.name) ctx.websocket.on(&#x27;message&#x27;, msg =&gt; &#123; console.log(&#x27;前端发过来的数据：&#x27;, msg) &#125;) ctx.websocket.on(&#x27;close&#x27;, () =&gt; &#123; console.log(&#x27;前端关闭了websocket&#x27;) &#125;)&#125;)app.ws.use(wsRouter.routes()).use(wsRouter.allowedMethods()); 其他环境 mac系统主机（或者window系统主机），因为hbuilder和小程序开发工具只有mac/window版本 安装node.js和yarn，推荐使用nvm进行管理 下载安装hbuilder和微信小程序上传CI插件 下载安装微信小程序开发工具 安装git工具 配置 git拉取项目需要配置SSH密钥 hbulider cli命令行工具的相关配置 参考链接NodeJS运行Shell的方式及搭建运维平台","categories":[{"name":"工具","slug":"工具","permalink":"http://example.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"uniapp","slug":"uniapp","permalink":"http://example.com/tags/uniapp/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-05-15T14:39:21.602Z","updated":"2022-05-15T14:39:21.602Z","comments":true,"path":"2022/05/15/hello-world/","link":"","permalink":"http://example.com/2022/05/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"在vscode使用七牛云图床","slug":"在vscode使用七牛云图床","date":"2021-09-02T07:38:30.000Z","updated":"2022-05-24T04:10:37.835Z","comments":true,"path":"2021/09/02/在vscode使用七牛云图床/","link":"","permalink":"http://example.com/2021/09/02/%E5%9C%A8vscode%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A/","excerpt":"","text":"","categories":[{"name":"工具","slug":"工具","permalink":"http://example.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"VS Code","slug":"VS-Code","permalink":"http://example.com/tags/VS-Code/"}]},{"title":"使用Issue进行项目管理","slug":"使用git-issue进行项目管理","date":"2021-09-01T07:46:08.000Z","updated":"2022-05-15T14:39:21.605Z","comments":true,"path":"2021/09/01/使用git-issue进行项目管理/","link":"","permalink":"http://example.com/2021/09/01/%E4%BD%BF%E7%94%A8git-issue%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/","excerpt":"","text":"Issue是什么 Issue翻译成中文是指问题，争论点，在GitLab中可以认为是一项待完成的任务，我们可以发起一个Issue来提交软件的bug，也可以将功能的开发作为一个Issue。Issue可以简单的理解为GitLab自带的项目管理工具。 在GitLab中使用Issue创建Issue 一个Issue包含了以下信息： 标题，描述——这个Issue是干什么的 Assignee这个任务分配给谁 Label标签 Milestone对应的版本 Due Date预计完成的时间 创建Issue之后，可以在相关的Issue下进行讨论和问题跟踪： 基于Issue我们可以拉取分支，在拉取的分支上解决了Issue的问题之后，提交远程分支，就可以发起Merge Request，合并通过之后就可以关闭这个Issue。 老版本的GitLab拉取分支时无法指定分支的来源（Source），只能从默认分支中拉取，发起合并时，也只有合并到默认分支才可以自动关闭Issue。 想要关闭Issue，我们也可以在Issue的界面直接点击关闭Issue的按钮，或者在看板界面，直接拖拽到关闭面板。 除了在控制台操作，另外我们还可以在merge和commit时，使用close #+issues序号来关闭Issue；在merge中使用，当merge通过后issue会被关闭；在commit中使用，只有commit推送到默认分支时才会生效。close命令不用这么精确，像closing、closed等都可以，下面是官方说明： This translates to the following keywords: Close, Closes, Closed, Closing, close, closes, closed, closing Fix, Fixes, Fixed, Fixing, fix, fixes, fixed, fixing Resolve, Resolves, Resolved, Resolving, resolve, resolves, resolved, resolving Implement, Implements, Implemented, Implementing, implement, implements, implemented, implementing Label创建标签可以方便对issue进行查找和管理，标签一般分为两种，issue类型和issue状态。issue状态可以用来构建看板栏目，issue类型用来标记issue的作用，如bug、feature等。 MileStonesMileStones是一个时间概念，可以和Due Date一样能对issue进行时间上的管理，和Due Date不同，我们可以将多个issue划分到某个MileStones下统一管理，以时间维度进行issue管理，可以当做对项目进行版本迭代管理。 git工作流我们的仓库中固定存在三个分支： master默认分支，生产环境运行代码 backup备份分支，上个版本代码，用于紧急情况直接进行回滚操作 release发布分支，用于测试环境功能测试 所有功能开发和bug修改都应该创建issue，然后拉取分支，这个分支应该从master拉取，不能从release中拉取，一是因为release可能存在正在测试的功能，二是release中正在测试的代码可能并不会上线或者说并不会在当前需求之前上线；当功能开发完成之后如果需要进行测试，我们必须先拉取release进行合并（merge），然后才能推送到远程仓库，在远程仓库进行Merge Request；当release通过测试后，将release合并到master然后发布master，当然合并之前先将master合并到backup分支进行备份。 在一般情况一个release分支足够了，但是如果需求迭代比较多，而且上线时间不确定可以直接使用issue创建的分支进行测试，或者将多个issue合并为版本分支进行测试，然后将分支合并到master上。","categories":[{"name":"工具","slug":"工具","permalink":"http://example.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"GitLab","slug":"GitLab","permalink":"http://example.com/tags/GitLab/"}]},{"title":"使用Hexo构建自己的博客","slug":"使用Hexo构建自己的博客","date":"2021-08-31T05:44:23.000Z","updated":"2022-05-15T14:39:21.605Z","comments":true,"path":"2021/08/31/使用Hexo构建自己的博客/","link":"","permalink":"http://example.com/2021/08/31/%E4%BD%BF%E7%94%A8Hexo%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"安装Hexo是一个基于nodejs的静态化框架，你可以使用MarkDown写文章，Hexo会帮你生成带有漂亮主题的静态文件。在准备安装Hexo之前，我们需要先安装nodejs，建议安装最新的稳定版。 安装完之后，我们在命令窗口，输入node -v，如果返回当前node版本号，说明你成功安装好了nodejs，然后我们运行命令安装Hexo: 1npm install hexo-cli -g npm是node的包管理工具，我们安装nodejs时会安装对应版本的npm，npm install命令安装node包，-g表示安装到全局。 安装好hexo-cli之后，我们就可以构建我们的blog项目了，运行命令初始化博客目录： 123hexo init x007xyz.github.io // 初始化博客目录cd x007xyz.github.io // 进入对应博客目录npm install // 安装项目需要的包 到这里Hexo就安装好了，现在我们就可以使用Hexo： 运行hexo server/s启动服务 运行hexo generate/g生成静态资源 使用主题刚搭建完成的网址看起来还是十分简陋的，需要我们进行美化一下，我们需要使用主题进行美化一下，在这里你可以选择你想要的主题：Hexo主题 我使用的主题是pure，在Hexo项目中，运行命令： 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 然后修改_config.yml文件中的theme设置为theme: pure，启动服务主题就生效了。 pure中有用的一些Hexo的插件实现一些功能，需要我们额外去安装和设置，以hexo-wordcount为例，我们来进行插件的安装。 首先我们需要将npm包安装到项目中： 1npm i --save hexo-wordcount 然后找到主题文件中的_config.yml(在themes/pure目录下)，将postCount的enable设置为true，开始文字统计功能。 12345# wordcountpostCount: enable: true wordcount: true # 文章字数统计 min2read: true # 阅读时长预计 刷新页面，页面已经有相应的统计信息了，但这时语言却是英文，如果需要修改为中文，我们要将项目的_config.yml(项目根目录下)中的language设置为zh-CN，然后重新启动服务，统计信息就是使用中文展示了。 发布到GitHub PagesGitHub Pages可以不用购买服务器和域名就让人们能在互联网上访问到你的个人博客，你只需要拥有一个Github账号即可。 将Hexo项目部署到GitHub Pages十分简单，首先你需要创建一个名字为[name].github.io的共有仓库。 然后在项目中安装hexo-deployer-git: 1npm install hexo-deployer-git --save 然后打开项目的_config.yml配置项目地址： 123deploy: type: git repo: https://github.com/x007xyz/x007xyz.github.io.git 运行部署命令hexo deploy/d，在浏览器中输入[name].github.io就可以看到你部署好的项目了。 开始你的第一篇文章新建文章运行命令 1hexo new article （这里的article写上你的文章的名称） 你的source/_posts目录下会生成一个 article.md 文件，在这个文件下就可以写上你的博客内容了。用 Markdown 的语法去写。 给文章添加tags1hexo new page tags 在项目中会生成source/tags/index.md，将其中的内容修改为： 1234---title: tagstype: &quot;tags&quot;--- 在文章的头部信息添加 12tags: - 标签一 就可以给文章打上相应的标签了 给文章添加分类1hexo new page categories 在项目中会生成source/categories/index.md，将其中的内容修改为： 1234---title: categoriestype: &quot;categories&quot;--- 在文章的头部信息添加 12categories: - 分类一 就可以将文章进行分类了 修改标签和分类的布局现在我们进入项目的标签和分类项暂时还是无法看到数据的，因为我们需要为他们设置合适的布局方式，pure主题提供多种布局方式，具体的方式我们可以查看theme/pure/_sourcemarkdown文件中配置的layout。 我们将标签页面的layout设置为tags，分类页面的layout设置为categories，进行对应的页面，就可以看到内容了。","categories":[{"name":"工具","slug":"工具","permalink":"http://example.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"http://example.com/tags/Github/"}]}],"categories":[{"name":"工具","slug":"工具","permalink":"http://example.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"uniapp","slug":"uniapp","permalink":"http://example.com/tags/uniapp/"},{"name":"VS Code","slug":"VS-Code","permalink":"http://example.com/tags/VS-Code/"},{"name":"Vue","slug":"Vue","permalink":"http://example.com/tags/Vue/"},{"name":"eslint","slug":"eslint","permalink":"http://example.com/tags/eslint/"},{"name":"GitLab","slug":"GitLab","permalink":"http://example.com/tags/GitLab/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"http://example.com/tags/Github/"}]}