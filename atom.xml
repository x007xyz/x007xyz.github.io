<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>x007xyz blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-15T14:39:21.602Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>x007xyz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/05/15/hello-world/"/>
    <id>http://example.com/2022/05/15/hello-world/</id>
    <published>2022-05-15T14:39:21.602Z</published>
    <updated>2022-05-15T14:39:21.602Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>构建uniapp(微信小程序)发布平台</title>
    <link href="http://example.com/2022/05/15/%E6%9E%84%E5%BB%BAuniapp(%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F)%E5%8F%91%E5%B8%83%E5%B9%B3%E5%8F%B0/"/>
    <id>http://example.com/2022/05/15/%E6%9E%84%E5%BB%BAuniapp(%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F)%E5%8F%91%E5%B8%83%E5%B9%B3%E5%8F%B0/</id>
    <published>2022-05-15T06:07:06.000Z</published>
    <updated>2022-05-15T14:43:14.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建uniapp-微信小程序-发布平台"><a href="#构建uniapp-微信小程序-发布平台" class="headerlink" title="构建uniapp(微信小程序)发布平台"></a>构建uniapp(微信小程序)发布平台</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#nodejs%E8%B0%83%E7%94%A8shell%E5%91%BD%E4%BB%A4">node.js调用shell命令</a></p><ul><li><p>  <a href="#%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97child_process">原生模块child_process</a></p></li><li><p>  <a href="#shelljs">shelljs</a></p></li><li><p>  <a href="#simple-git%E6%93%8D%E4%BD%9Cgit">simple-git操作git</a></p></li></ul></li><li><p><a href="#%E5%8F%91%E5%B8%83%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B">发布小程序流程</a></p><ul><li><p>  <a href="#%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81">拉取代码</a></p></li><li><p>  <a href="#%E5%8F%91%E5%B8%83%E5%B9%B6%E4%B8%8A%E4%BC%A0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F">发布并上传微信小程序</a></p></li></ul></li><li><p><a href="#%E4%BD%BF%E7%94%A8koa%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1">使用koa构建服务</a></p><ul><li>  <a href="#%E9%80%9A%E8%BF%87websocket%E8%B0%83%E7%94%A8%E6%8E%A5%E5%8F%A3">通过websocket调用接口</a></li></ul></li><li><p><a href="#%E5%85%B6%E4%BB%96">其他</a></p><ul><li><p>  <a href="#%E7%8E%AF%E5%A2%83">环境</a></p></li><li><p>  <a href="#%E9%85%8D%E7%BD%AE">配置</a></p></li><li><p>  <a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">参考链接</a></p></li></ul></li></ul><h2 id="node-js调用shell命令"><a href="#node-js调用shell命令" class="headerlink" title="node.js调用shell命令"></a>node.js调用shell命令</h2><p>要实现自动发布微信小程序，我们需要拉取代码和调用hbuilder，这些都依赖<code>shell</code>脚本，所以我们先来了解一下如何在<code>node.js</code>中调用<code>shell</code>命令。</p><h3 id="原生模块child-process"><a href="#原生模块child-process" class="headerlink" title="原生模块child_process"></a>原生模块child_process</h3><p>在<code>node.js</code>中可以使用原生的<code>child_process</code>模块来调用<code>shell</code>命令的形式来执行<code>git</code>命令，调用的两种方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">child_process.exec(<span class="built_in">command</span>[, options][, callback])</span><br><span class="line">child_process.execFile(file[, args][, options][, callback])</span><br></pre></td></tr></table></figure><p>例如执行拉取代码的命令就是<code>child_process.exec(&#39;git pull&#39;)</code>；</p><h3 id="shelljs"><a href="#shelljs" class="headerlink" title="shelljs"></a>shelljs</h3><p>我们也可以借助第三方库<code>shelljs</code>，它是基于node的一个扩展，比原生的child_process兼容性更好，使用更灵活。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shell = <span class="built_in">require</span>(<span class="string">&#x27;shelljs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!shell.<span class="title function_">which</span>(<span class="string">&#x27;git&#x27;</span>)) &#123;</span><br><span class="line">  shell.<span class="title function_">echo</span>(<span class="string">&#x27;Sorry, this script requires git&#x27;</span>);</span><br><span class="line">  shell.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Copy files to release dir</span></span><br><span class="line">shell.<span class="title function_">rm</span>(<span class="string">&#x27;-rf&#x27;</span>, <span class="string">&#x27;out/Release&#x27;</span>);</span><br><span class="line">shell.<span class="title function_">cp</span>(<span class="string">&#x27;-R&#x27;</span>, <span class="string">&#x27;stuff/&#x27;</span>, <span class="string">&#x27;out/Release&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace macros in each .js file</span></span><br><span class="line">shell.<span class="title function_">cd</span>(<span class="string">&#x27;lib&#x27;</span>);</span><br><span class="line">shell.<span class="title function_">ls</span>(<span class="string">&#x27;*.js&#x27;</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">file</span>) &#123;</span><br><span class="line">  shell.<span class="title function_">sed</span>(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;BUILD_VERSION&#x27;</span>, <span class="string">&#x27;v0.1.2&#x27;</span>, file);</span><br><span class="line">  shell.<span class="title function_">sed</span>(<span class="string">&#x27;-i&#x27;</span>, <span class="regexp">/^.*REMOVE_THIS_LINE.*$/</span>, <span class="string">&#x27;&#x27;</span>, file);</span><br><span class="line">  shell.<span class="title function_">sed</span>(<span class="string">&#x27;-i&#x27;</span>, <span class="regexp">/.*REPLACE_LINE_WITH_MACRO.*\n/</span>, shell.<span class="title function_">cat</span>(<span class="string">&#x27;macro.js&#x27;</span>), file);</span><br><span class="line">&#125;);</span><br><span class="line">shell.<span class="title function_">cd</span>(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run external tool synchronously</span></span><br><span class="line"><span class="keyword">if</span> (shell.<span class="title function_">exec</span>(<span class="string">&#x27;git commit -am &quot;Auto-commit&quot;&#x27;</span>).<span class="property">code</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">  shell.<span class="title function_">echo</span>(<span class="string">&#x27;Error: Git commit failed&#x27;</span>);</span><br><span class="line">  shell.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="simple-git操作git"><a href="#simple-git操作git" class="headerlink" title="simple-git操作git"></a>simple-git操作git</h3><p>如果操作git命令我们可以使用专门为git设置的库simple-git，示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> simpleGit = <span class="built_in">require</span>(<span class="string">&#x27;simple-git/promise&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">gitinit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> projectPath = path.<span class="title function_">join</span>(__dirname);</span><br><span class="line">  <span class="keyword">const</span> cmd = <span class="string">&quot;init&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> git = <span class="title function_">simpleGit</span>(projectPath);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> git[cmd](args);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;res:&quot;</span>, res);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;执行 simple-git 命令时发生错误&#x27;</span>, &#123;</span><br><span class="line">      projectPath,</span><br><span class="line">      cmd,</span><br><span class="line">      args</span><br><span class="line">    &#125;, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">gitinit</span>();</span><br></pre></td></tr></table></figure><h2 id="发布小程序流程"><a href="#发布小程序流程" class="headerlink" title="发布小程序流程"></a>发布小程序流程</h2><p>我们先梳理一下，uniapp开发正常发布小程序的简单流程。</p><ol><li><p> 首先拉取最新的代码</p></li><li><p> 使用hbuilder打包并发行</p></li><li><p> 使用微信小程序开发工具上传体验版</p></li></ol><p>以上三个步骤就是小程序发布的简单流程了，我们只需要能够使用代码实现上述的步骤就可以达到我们需求了。下面我们来使用<code>node.js</code>来实现一下：</p><h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><p>使用<code>git</code>命令我们就可以拉取代码了，借助<code>simple-git</code>我们就可以在<code>node.js</code>中操作<code>git</code>。</p><p>在一般情况下，项目应该是都已经在本地了，我们只需要使用<code>git pull</code>拉取最新代码就可以了，但是我们也应该兼容本地代码仓库不存在的情况；现在我们开始构建项目。</p><p>首先我们需要创建一个文件夹<code>project</code>用来放置我们从远端来取下拉的项目，然后创建<code>publish.js</code>用来编写发布逻辑，我们先添加拉取项目的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Git</span> = <span class="built_in">require</span>(<span class="string">&#x27;simple-git&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fse = <span class="built_in">require</span>(<span class="string">&#x27;fs-extra&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> dirPath = path.<span class="title function_">join</span>(__dirname, <span class="string">`./project/<span class="subst">$&#123;data.name&#125;</span>`</span>)</span><br><span class="line"><span class="keyword">let</span> git = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 查看项目是否存在</span></span><br><span class="line"><span class="keyword">if</span> (!fse.<span class="title function_">pathExistsSync</span>(dirPath)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;项目不存在，开始创建项目&#x27;</span>)</span><br><span class="line">  <span class="comment">// 不存在则git clone</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Git</span>().<span class="title function_">clone</span>(remoteUrl, dirPath)</span><br><span class="line">  git = <span class="title class_">Git</span>(dirPath)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;项目存在，拉取最新代码&#x27;</span>)</span><br><span class="line">  <span class="comment">// 存在则git pull</span></span><br><span class="line">  git = <span class="title class_">Git</span>(dirPath)</span><br><span class="line">  <span class="keyword">const</span> logs = <span class="keyword">await</span> git.<span class="title function_">pull</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取信息的提交信息</span></span><br><span class="line"><span class="keyword">const</span> logs = <span class="keyword">await</span> git.<span class="title function_">log</span>(&#123; <span class="attr">maxCount</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="发布并上传微信小程序"><a href="#发布并上传微信小程序" class="headerlink" title="发布并上传微信小程序"></a>发布并上传微信小程序</h3><p>通过hbuilder提供的<a href="https://hx.dcloud.net.cn/cli/publish-mp-weixin" title="cli命令行工具">cli命令行工具</a>我们可以直接使用一行shell命令发布并上传微信小程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译uni-app项目到微信小程序，并发行小程序到微信平台 </span></span><br><span class="line">cli publish --platform mp-weixin --project 项目名称 --upload <span class="literal">true</span> --appid 小程序appid --description 发布描述 --version 发布版本 --privatekey 小程序上传密钥文件</span><br></pre></td></tr></table></figure><p>发布微信小程序之前，我们需要先将拉取下来的项目使用hbuilder打开，cli命令行工具也提供了这样的功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cli project open --path 项目路径</span><br></pre></td></tr></table></figure><p>因为我们的项目可能使用了npm包，所以要在发布之前安装所有的npm包。</p><p>所以发布命令的执行过程是：</p><ol><li><p> 运行<code>yarn</code>，安装第三方包</p></li><li><p> 使用hbuilder打开项目</p></li><li><p> 使用hbuilder打包并上传微信小程序</p></li></ol><p>对应的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dirPath 是项目路径，config.cli是cli路径</span></span><br><span class="line"><span class="comment">// 打开项目并执行yarn命令</span></span><br><span class="line">shell.<span class="title function_">exec</span>(<span class="string">`cd <span class="subst">$&#123;dirPath&#125;</span> &amp;&amp; yarn`</span>)</span><br><span class="line"><span class="comment">// 使用hbuilder打开项目</span></span><br><span class="line">shell.<span class="title function_">exec</span>(<span class="string">`<span class="subst">$&#123;config.cli&#125;</span> project open --path <span class="subst">$&#123;dirPath&#125;</span>`</span>)</span><br><span class="line"><span class="comment">// 使用hbuilder打包并上传微信小程序</span></span><br><span class="line">shell.<span class="title function_">exec</span>(</span><br><span class="line">  <span class="string">`<span class="subst">$&#123;config.cli&#125;</span> publish --platform mp-weixin --project <span class="subst">$&#123;name&#125;</span> --upload true --appid <span class="subst">$&#123;appid&#125;</span> --description <span class="subst">$&#123;versionDesc&#125;</span> --version <span class="subst">$&#123;version&#125;</span> --privatekey <span class="subst">$&#123;privatekey&#125;</span>`</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用koa构建服务"><a href="#使用koa构建服务" class="headerlink" title="使用koa构建服务"></a>使用koa构建服务</h2><p>完成上面的流程之后，我们使用<code>node.js</code>自动发布小程序了，但是实际的应用中，我们需要把这个能力提供给所有的人，所以我们使用<code>koa</code>构建web服务将发布的能力对外开放。我们先构建一个简单的<code>koa</code>服务：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> render = <span class="built_in">require</span>(<span class="string">&#x27;koa-art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(app, &#123;</span><br><span class="line">  <span class="attr">root</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;view&#x27;</span>),</span><br><span class="line">  <span class="attr">extname</span>: <span class="string">&#x27;.art&#x27;</span>,</span><br><span class="line">  <span class="attr">debug</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> ctx.<span class="title function_">render</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>()).<span class="title function_">use</span>(router.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server is running on port 3000&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="通过websocket调用接口"><a href="#通过websocket调用接口" class="headerlink" title="通过websocket调用接口"></a>通过websocket调用接口</h3><p>发布微信小程序是一个比较漫长的过程，如果在调用的过程中一直不给页面反馈对用户就非常不友好了；而且同一个微信小程序如果正在发布中，不应该能够再次调用发布接口，所以我们使用websocket进行数据交互；现在在<code>koa</code>添加<code>websocket</code>，然后使用<code>websocket</code>返回打印信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> websockify = <span class="built_in">require</span>(<span class="string">&#x27;koa-websocket&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">websockify</span>(<span class="keyword">new</span> <span class="title class_">Koa</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义websocket连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> wsRouter = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line">wsRouter.<span class="title function_">get</span>(<span class="string">&#x27;/ws/publish/:name&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ctx&#x27;</span>, ctx.<span class="property">params</span>);</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;./publish&#x27;</span>)(ctx.<span class="property">websocket</span>, ctx.<span class="property">params</span>.<span class="property">name</span>)</span><br><span class="line">  ctx.<span class="property">websocket</span>.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前端发过来的数据：&#x27;</span>, msg)</span><br><span class="line">  &#125;)</span><br><span class="line">  ctx.<span class="property">websocket</span>.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前端关闭了websocket&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="property">ws</span>.<span class="title function_">use</span>(wsRouter.<span class="title function_">routes</span>()).<span class="title function_">use</span>(wsRouter.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol><li><p> mac系统主机（或者window系统主机），因为hbuilder和小程序开发工具只有mac/window版本</p></li><li><p> 安装<code>node.js</code>和<code>yarn</code>，推荐使用<code>nvm</code>进行管理</p></li><li><p> 下载安装<a href="https://www.dcloud.io/hbuilderx.html" title="hbuilder">hbuilder</a>和<a href="https://ext.dcloud.net.cn/plugin?name=weapp-miniprogram-ci" title="微信小程序上传CI插件">微信小程序上传CI插件</a></p></li><li><p> 下载安装<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" title="微信小程序开发工具">微信小程序开发工具</a></p></li><li><p> 安装<a href="https://git-scm.com/downloads" title="git工具">git工具</a></p></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li><p> git拉取项目需要<a href="https://help.aliyun.com/document_detail/153709.html" title="配置SSH密钥">配置SSH密钥</a></p></li><li><p> <a href="https://hx.dcloud.net.cn/cli/README" title="hbulider cli命令行工具">hbulider cli命令行工具</a>的相关配置</p></li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://cloud.tencent.com/developer/article/1812689" title="NodeJS运行Shell的方式及搭建运维平台">NodeJS运行Shell的方式及搭建运维平台</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;构建uniapp-微信小程序-发布平台&quot;&gt;&lt;a href=&quot;#构建uniapp-微信小程序-发布平台&quot; class=&quot;headerlink&quot; title=&quot;构建uniapp(微信小程序)发布平台&quot;&gt;&lt;/a&gt;构建uniapp(微信小程序)发布平台&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="uniapp" scheme="http://example.com/tags/uniapp/"/>
    
  </entry>
  
  <entry>
    <title>在vscode使用七牛云图床</title>
    <link href="http://example.com/2021/09/02/%E5%9C%A8vscode%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A/"/>
    <id>http://example.com/2021/09/02/%E5%9C%A8vscode%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%9B%BE%E5%BA%8A/</id>
    <published>2021-09-02T07:38:30.000Z</published>
    <updated>2022-05-15T14:39:21.605Z</updated>
    
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="vscode" scheme="http://example.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>使用Issue进行项目管理</title>
    <link href="http://example.com/2021/09/01/%E4%BD%BF%E7%94%A8git-issue%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2021/09/01/%E4%BD%BF%E7%94%A8git-issue%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</id>
    <published>2021-09-01T07:46:08.000Z</published>
    <updated>2022-05-15T14:39:21.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Issue是什么"><a href="#Issue是什么" class="headerlink" title="Issue是什么"></a>Issue是什么</h1><blockquote><p>Issue翻译成中文是指问题，争论点，在GitLab中可以认为是一项待完成的任务，我们可以发起一个Issue来提交软件的bug，也可以将功能的开发作为一个Issue。Issue可以简单的理解为GitLab自带的项目管理工具。</p></blockquote><h1 id="在GitLab中使用Issue"><a href="#在GitLab中使用Issue" class="headerlink" title="在GitLab中使用Issue"></a>在GitLab中使用Issue</h1><h2 id="创建Issue"><a href="#创建Issue" class="headerlink" title="创建Issue"></a>创建Issue</h2><p><img src="https://qiniu.900fe.com/B0BF2091C2D929B9.png" alt="B0BF2091C2D929B9"></p><p>一个Issue包含了以下信息：</p><ol><li>标题，描述——这个Issue是干什么的</li><li>Assignee这个任务分配给谁</li><li>Label标签</li><li>Milestone对应的版本</li><li>Due Date预计完成的时间</li></ol><p>创建Issue之后，可以在相关的Issue下进行讨论和问题跟踪：</p><p><img src="https://qiniu.900fe.com/AB23220262D21A91.png" alt="AB23220262D21A91"></p><p>基于Issue我们可以拉取分支，在拉取的分支上解决了Issue的问题之后，提交远程分支，就可以发起Merge Request，合并通过之后就可以关闭这个Issue。</p><blockquote><p>老版本的GitLab拉取分支时无法指定分支的来源（Source），只能从默认分支中拉取，发起合并时，也只有合并到默认分支才可以自动关闭Issue。</p></blockquote><p><img src="https://qiniu.900fe.com/AE3AAE0B5A3EF60E.png" alt="AE3AAE0B5A3EF60E"></p><p>想要关闭Issue，我们也可以在Issue的界面直接点击关闭Issue的按钮，或者在看板界面，直接拖拽到关闭面板。</p><p>除了在控制台操作，另外我们还可以在merge和commit时，使用close #+issues序号来关闭Issue；在merge中使用，当merge通过后issue会被关闭；在commit中使用，只有commit推送到默认分支时才会生效。close命令不用这么精确，像closing、closed等都可以，下面是官方说明：</p><blockquote><p>This translates to the following keywords: Close, Closes, Closed, Closing, close, closes, closed, closing Fix, Fixes, Fixed, Fixing, fix, fixes, fixed, fixing Resolve, Resolves, Resolved, Resolving, resolve, resolves, resolved, resolving Implement, Implements, Implemented, Implementing, implement, implements, implemented, implementing</p></blockquote><h2 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h2><p>创建标签可以方便对issue进行查找和管理，标签一般分为两种，issue类型和issue状态。issue状态可以用来构建看板栏目，issue类型用来标记issue的作用，如bug、feature等。</p><p><img src="https://qiniu.900fe.com/EB1E8808DDCA1D4C.png" alt="EB1E8808DDCA1D4C"></p><h2 id="MileStones"><a href="#MileStones" class="headerlink" title="MileStones"></a>MileStones</h2><p>MileStones是一个时间概念，可以和Due Date一样能对issue进行时间上的管理，和Due Date不同，我们可以将多个issue划分到某个MileStones下统一管理，以时间维度进行issue管理，可以当做对项目进行版本迭代管理。</p><p><img src="https://qiniu.900fe.com/7D35FC500B443A3E.png" alt="7D35FC500B443A3E"></p><h1 id="git工作流"><a href="#git工作流" class="headerlink" title="git工作流"></a>git工作流</h1><p><img src="https://qiniu.900fe.com/04832EFCA701A0A2.png" alt="04832EFCA701A0A2"><br>我们的仓库中固定存在三个分支：</p><ul><li>master默认分支，生产环境运行代码</li><li>backup备份分支，上个版本代码，用于紧急情况直接进行回滚操作</li><li>release发布分支，用于测试环境功能测试</li></ul><p>所有功能开发和bug修改都应该创建issue，然后拉取分支，这个分支应该从master拉取，不能从release中拉取，一是因为release可能存在正在测试的功能，二是release中正在测试的代码可能并不会上线或者说并不会在当前需求之前上线；当功能开发完成之后如果需要进行测试，我们必须先拉取release进行合并（merge），然后才能推送到远程仓库，在远程仓库进行Merge Request；当release通过测试后，将release合并到master然后发布master，当然合并之前先将master合并到backup分支进行备份。</p><p>在一般情况一个release分支足够了，但是如果需求迭代比较多，而且上线时间不确定可以直接使用issue创建的分支进行测试，或者将多个issue合并为版本分支进行测试，然后将分支合并到master上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Issue是什么&quot;&gt;&lt;a href=&quot;#Issue是什么&quot; class=&quot;headerlink&quot; title=&quot;Issue是什么&quot;&gt;&lt;/a&gt;Issue是什么&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Issue翻译成中文是指问题，争论点，在GitLab中可以认为是一</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="GitLab" scheme="http://example.com/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo构建自己的博客</title>
    <link href="http://example.com/2021/08/31/%E4%BD%BF%E7%94%A8Hexo%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2021/08/31/%E4%BD%BF%E7%94%A8Hexo%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-08-31T05:44:23.000Z</published>
    <updated>2022-05-15T14:39:21.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Hexo是一个基于nodejs的静态化框架，你可以使用MarkDown写文章，Hexo会帮你生成带有漂亮主题的静态文件。<br>在准备安装Hexo之前，我们需要先安装<a href="https://nodejs.org/zh-cn/download/">nodejs</a>，建议安装最新的稳定版。</p><p>安装完之后，我们在命令窗口，输入<code>node -v</code>，如果返回当前node版本号，说明你成功安装好了nodejs，然后我们运行命令安装Hexo:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>npm是node的包管理工具，我们安装nodejs时会安装对应版本的npm，<code>npm install</code>命令安装node包，<code>-g</code>表示安装到全局。</p><p>安装好<code>hexo-cli</code>之后，我们就可以构建我们的blog项目了，运行命令初始化博客目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init x007xyz.github.io // 初始化博客目录</span><br><span class="line">cd x007xyz.github.io // 进入对应博客目录</span><br><span class="line">npm install // 安装项目需要的包</span><br></pre></td></tr></table></figure><p>到这里Hexo就安装好了，现在我们就可以使用Hexo：</p><ol><li>运行<code>hexo server/s</code>启动服务</li><li>运行<code>hexo generate/g</code>生成静态资源</li></ol><h1 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h1><p>刚搭建完成的网址看起来还是十分简陋的，需要我们进行美化一下，我们需要使用主题进行美化一下，在这里你可以选择你想要的主题：<a href="https://hexo.io/themes/">Hexo主题</a></p><p>我使用的主题是<a href="https://github.com/cofess/hexo-theme-pure">pure</a>，在Hexo项目中，运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/cofess/hexo-theme-pure.git themes/pure</span><br></pre></td></tr></table></figure><p>然后修改<code>_config.yml</code>文件中的theme设置为<code>theme: pure</code>，启动服务主题就生效了。</p><p><code>pure</code>中有用的一些Hexo的插件实现一些功能，需要我们额外去安装和设置，以<a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>为例，我们来进行插件的安装。</p><p>首先我们需要将npm包安装到项目中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>然后找到主题文件中的<code>_config.yml</code>(在themes/pure目录下)，将postCount的enable设置为true，开始文字统计功能。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wordcount</span></span><br><span class="line"><span class="attr">postCount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span>  <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span>  <span class="comment"># 阅读时长预计 </span></span><br></pre></td></tr></table></figure><p>刷新页面，页面已经有相应的统计信息了，但这时语言却是英文，如果需要修改为中文，我们要将项目的<code>_config.yml</code>(项目根目录下)中的language设置为zh-CN，然后重新启动服务，统计信息就是使用中文展示了。</p><h1 id="发布到GitHub-Pages"><a href="#发布到GitHub-Pages" class="headerlink" title="发布到GitHub Pages"></a>发布到GitHub Pages</h1><p>GitHub Pages可以不用购买服务器和域名就让人们能在互联网上访问到你的个人博客，你只需要拥有一个Github账号即可。</p><p>将Hexo项目部署到GitHub Pages十分简单，首先你需要创建一个名字为[name].github.io的共有仓库。</p><p>然后在项目中安装<code>hexo-deployer-git</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后打开项目的<code>_config.yml</code>配置项目地址：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/x007xyz/x007xyz.github.io.git</span></span><br></pre></td></tr></table></figure><p>运行部署命令<code>hexo deploy/d</code>，在浏览器中输入<code>[name].github.io</code>就可以看到你部署好的项目了。</p><h1 id="开始你的第一篇文章"><a href="#开始你的第一篇文章" class="headerlink" title="开始你的第一篇文章"></a>开始你的第一篇文章</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new article （这里的article写上你的文章的名称）</span><br></pre></td></tr></table></figure><p>你的source/_posts目录下会生成一个 article.md 文件，在这个文件下就可以写上你的博客内容了。用 Markdown 的语法去写。</p><h2 id="给文章添加tags"><a href="#给文章添加tags" class="headerlink" title="给文章添加tags"></a>给文章添加tags</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>在项目中会生成<code>source/tags/index.md</code>，将其中的内容修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在文章的头部信息添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - 标签一</span><br></pre></td></tr></table></figure><p>就可以给文章打上相应的标签了</p><h2 id="给文章添加分类"><a href="#给文章添加分类" class="headerlink" title="给文章添加分类"></a>给文章添加分类</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>在项目中会生成<code>source/categories/index.md</code>，将其中的内容修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在文章的头部信息添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - 分类一</span><br></pre></td></tr></table></figure><p>就可以将文章进行分类了</p><h2 id="修改标签和分类的布局"><a href="#修改标签和分类的布局" class="headerlink" title="修改标签和分类的布局"></a>修改标签和分类的布局</h2><p>现在我们进入项目的标签和分类项暂时还是无法看到数据的，因为我们需要为他们设置合适的布局方式，<code>pure</code>主题提供多种布局方式，具体的方式我们可以查看<code>theme/pure/_source</code>markdown文件中配置的layout。</p><p>我们将标签页面的layout设置为tags，分类页面的layout设置为categories，进行对应的页面，就可以看到内容了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;Hexo是一个基于nodejs的静态化框架，你可以使用MarkDown写文章，Hexo会帮你生成带有漂亮主题的静态文件。&lt;br&gt;在准备安装H</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Github" scheme="http://example.com/tags/Github/"/>
    
  </entry>
  
</feed>
